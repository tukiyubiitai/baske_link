import 'dart:async';

import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:provider/provider.dart';
import 'package:search_massage/repository/map_repository.dart';

import '../models/model/map_model.dart';

class HomePage extends StatefulWidget {
  @override
  State<HomePage> createState() => HomePageState();
}

class HomePageState extends State<HomePage> {
  Position? currentPosition;
  late GoogleMapController _controller;
  late StreamSubscription<Position> positionStream;
  List<String> _photos = [];

  // final MapModel _mapModel = MapModel();
  final _pageController = PageController(
    viewportFraction: 0.85, //0.85くらいで端っこに別のカードが見えてる感じになる,
  );

  final Map<String, Marker> _markers = {};

  CameraPosition? cameraPosition;

  //初期位置
  final CameraPosition _kGooglePlex = const CameraPosition(
    target: LatLng(43.0686606, 141.3485613),
    zoom: 14,
  );

  final LocationSettings locationSettings = const LocationSettings(
    accuracy: LocationAccuracy.high, //正確性:highはAndroid(0-100m),iOS(10m)
    distanceFilter: 100,
  );

  @override
  void initState() {
    super.initState();

    //位置情報が許可されていない時に許可をリクエストする
    Future(() async {
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        await Geolocator.requestPermission();
      }
    });

    //現在位置を更新し続ける
    positionStream =
        Geolocator.getPositionStream(locationSettings: locationSettings)
            .listen((Position? position) {
      currentPosition = position;
      print(position == null
          ? 'Unknown'
          : '${position.latitude.toString()}, ${position.longitude.toString()}');
    });
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      alignment: Alignment.bottomCenter,
      children: [
        _mapSection(),
      ],
    );
  }

  Widget _mapSection() {
    return GoogleMap(
        mapType: MapType.normal,
        initialCameraPosition: _kGooglePlex,
        myLocationEnabled: true,
        //現在位置をマップ上に表示
        markers: _markers.values.toSet(),
        onMapCreated: _onMapCreated,
        onCameraMove: (CameraPosition cameraPositions) {
          //カメラの現在位置（CameraPosition）を取得して変数cameraPositionに設定
          cameraPosition = cameraPositions;
        },
        onCameraIdle: () async {
          if (cameraPosition != null) {
            final latitude = cameraPosition!.target.latitude;
            final longitude = cameraPosition!.target.longitude;
            await _setMarkers(latitude, longitude);
          }
        });
  }

  //マップが作成されたら呼ばれる
  Future<void> _onMapCreated(GoogleMapController controller) async {
    _controller = controller;
    if (currentPosition != null) {
      await _setMarkers(currentPosition!.latitude, currentPosition!.longitude);
    }
  }

  //現在位置から近くバスケコートのマーカーを表示する
  Future<void> _setMarkers(double? latitude, double? longitude) async {
    if (latitude == null || longitude == null) {
      setState(() {
        _markers.clear();
      });
      return;
    }

    //位置情報を取得に時間かかるから非同期
    final locations = await MapRepository().getCourt(latitude, longitude);

    setState(() {
      _markers.clear();
      for (final court in locations!.results) {
        final marker = Marker(
            markerId: MarkerId(court.name),
            position: LatLng(court.lat, court.lng),
            infoWindow: InfoWindow(
              title: court.name,
              snippet: court.formatted_address.replaceAll('日本、', ''),
            ),
            icon: BitmapDescriptor.defaultMarker,
            onTap: () async {
              print("これがid: ${court.place_id}");
              final viewModel = context.read<MapModel>();
              viewModel.urls.clear(); // リストをクリアする
              await viewModel.fetchPhoto(court.place_id);
              showModalBottomSheet(
                //モーダルの背景の色、透過
                backgroundColor: Colors.transparent,
                //ドラッグ可能にする（高さもハーフサイズからフルサイズになる様子）
                isScrollControlled: true,
                context: context,
                builder: (BuildContext context) {
                  return Container(
                    margin: EdgeInsets.only(top: 64),
                    height: MediaQuery.of(context).size.height *
                        0.44, // 画面の三分の一より少し高い
                    decoration: BoxDecoration(
                      //モーダル自体の色
                      color: Colors.white,
                      //角丸にする
                      borderRadius: BorderRadius.only(
                        topLeft: Radius.circular(20),
                        topRight: Radius.circular(20),
                      ),
                    ),
                    child: Column(
                      children: [
                        Padding(
                          padding: const EdgeInsets.only(
                            top: 10,
                          ),
                          child: Container(
                            height: 150,
                            child: PageView.builder(
                              itemCount: viewModel.urls.length,
                              itemBuilder: (BuildContext context, int index) {
                                final image = viewModel.urls[index];
                                return Container(
                                    padding: EdgeInsets.all(10),
                                    child: _photoItem(image));
                              },
                              controller: PageController(viewportFraction: 0.6),
                            ),
                          ),
                        ),
                        Text(
                          court.name,
                          style: TextStyle(
                              fontSize: 20, fontWeight: FontWeight.bold),
                        ),
                        Text(
                          court.formatted_address.replaceAll('日本、', ''),
                          style: TextStyle(fontSize: 16),
                        ),
                      ],
                    ),
                  );
                },
              );
            });
        _markers[marker.markerId.toString()] = marker;
      }
    });
  }

  Widget _photoItem(String image) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(20.0),
      child: Image.network(
        image,
        fit: BoxFit.cover,
      ),
    );
  }
}

//ChIJXWvDLMEnC18R3ka-MC7eDS4
//ChIJT6PkINwnC18Rpf5AKRqY8Tk
ChIJvXvjtYwoC18R9_mIBp4boaY
