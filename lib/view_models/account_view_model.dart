import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter_riverpod/flutter_riverpod.dart';import '../dialogs/snackbar.dart';import '../infrastructure/firebase/account_firebase.dart';import '../infrastructure/service/firebase_account_service.dart';import '../models/account/account.dart';import '../state/providers/account/account_notifier.dart';import '../state/providers/providers.dart';import '../utils/logger.dart';class AccountManager extends StateNotifier<AccountState> {  final FirebaseAccountService _firebaseService = FirebaseAccountService();  AccountManager() : super(const AccountState());  void onUserIsAccountCreatedSuccessfully(bool isSuccess) {    state = state.copyWith(isAccountCreatedSuccessfully: isSuccess);  }  void updateIsEditing(bool isEditing) {    state = state.copyWith(isEditing: isEditing);  }  void onUserNameChange(String name) {    state = state.copyWith(name: name);  }  void onUserImageChange(String imagePath) {    state = state.copyWith(imagePath: imagePath);  }  void updateAll(Account newAccount) {    state = state.copyWith(      id: newAccount.id,      name: newAccount.name,      imagePath: newAccount.imagePath,    );  }  // アカウント情報の更新（名前と画像パス）  void updateAccountInfo(String name, String imagePath) {    state = state.copyWith(name: name, imagePath: imagePath);  }  // アカウント作成の試み  Future<void> createAccount(WidgetRef ref) async {    state = state.copyWith(isLoading: true);    try {      final User? user = await _firebaseService.getCurrentUser();      if (user == null) {        ref.read(errorMessageProvider.notifier).state = "ユーザーが見つかりません";        return;      }      //入力検証のロジック      if (!_validateName(state.name, ref)) {        return;      }      // アカウントオブジェクトを取得      final Account newAccount = await prepareNewUserAccountData(          user.uid, state.name, state.imagePath);      // firestore　保存処理      var result = await AccountFirestore().saveNewUserToFirestore(newAccount);      if (result) {        // riverpodに保存        ref.read(accountNotifierProvider.notifier).updateAccount(newAccount);        // 完了通知、ローディング終了        state = state.copyWith(            isAccountCreatedSuccessfully: true, isLoading: false);        return;      }    } catch (e) {      AppLogger.instance.error("アカウント作成に失敗 $e");      state = state.copyWith(isLoading: false);    }  }  Future<void> updateUserAccount(bool isImageDeleted, WidgetRef ref) async {    try {      final Account myAccount = ref.read(accountNotifierProvider);      String name = state.name;      String oldName = myAccount.name;      String? imagePath = state.imagePath;      String oldImagePath = myAccount.imagePath;      //入力検証のロジック      if (!_validateName(state.name, ref)) {        return;      }      // 名前と画像に変更がない場合、早期に関数を終了      if (name == oldName && !isImageDeleted && imagePath == oldImagePath) {        showErrorSnackBar(context: ref.context, text: "変更がありません");        return;      }      // アカウントオブジェクトを取得      final Account updateAccount =          await AccountFirestore.prepareUpdatedUserAccountData(myAccount.id,              state.name, state.imagePath, isImageDeleted, myAccount.imagePath);      // firestore 更新処理      var result =          await AccountFirestore().saveUpdatedUserToFirestore(updateAccount);      if (result) {        // riverpodに保存        ref.read(accountNotifierProvider.notifier).updateAccount(updateAccount);        // 完了通知、ローディング終了        state = state.copyWith(updateIsEditing: true, isLoading: false);      }    } catch (e) {      AppLogger.instance.error("アカウント更新に失敗 $e");      state = state.copyWith(isLoading: false);    }  }  /// ユーザーアカウントをFirebaseから削除するメソッド。  /// [ref] - WidgetRefを使用して、Providerから状態を読み取るために使用。  /// 削除が成功した場合はtrue、失敗した場合はfalseを返す。  Future<bool> deleteUserAccount(WidgetRef ref) async {    try {      final Account myAccount = ref.read(accountNotifierProvider);      ;      // ロード開始      // LoadingManager.instance.startLoading(ref);      //削除処理      var result = await AccountFirestore().deleteCurrentUser(myAccount);      return result;    } catch (e) {      AppLogger.instance.error("アカウント削除に失敗　$e");      // エラーステートを設定する      return false;    } finally {      // ロード終了      state = state.copyWith(isLoading: false);    }  }  // Firebaseに保存されているユーザーアカウントデータを新しい情報で準備するメソッド。  /// [uid] - ユーザーID。  /// [name] - ユーザー名。  /// [imagePath] - ユーザーの画像パス。  /// 新しいアカウントオブジェクトを作成し、これを返す。  Future<Account> prepareNewUserAccountData(      String uid, String name, String? imagePath) async {    // トークン取得    final registrationToken = await _firebaseService.getToken();    // 画像アップロード    String? image = await _firebaseService.uploadUserImage(imagePath ?? "");    // アカウントオブジェクト作成    final Account newAccount = Account(        id: uid,        name: name,        myToken: registrationToken.toString(),        imagePath: image ?? "");    return newAccount;  }  /// 入力された名前が適切かどうかを検証するプライベートメソッド。  /// [name] - 検証する名前。  /// [ref] - WidgetRefを使用して、エラーメッセージの状態を設定するために使用。  /// 名前が空、または短すぎる場合にエラーメッセージを設定し、falseを返す。  bool _validateName(String name, WidgetRef ref) {    if (name.isEmpty) {      return false;    }    if (name.length < 1) {      return false;    }    return true;  }}