import 'package:basketball_app/utils/error_handler.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/material.dart';import 'package:flutter_riverpod/flutter_riverpod.dart';import '../../infrastructure/firebase/account_firebase.dart';import '../../infrastructure/service/firebase_account_service.dart';import '../../models/account/account.dart';import '../../utils/loading_manager.dart';import '../dialogs/snackbar_utils.dart';import '../state/providers/account/account_notifier.dart';import '../state/providers/account/account_state_notifier.dart';import '../state/providers/providers.dart';import '../utils/logger.dart';///ユーザーアカウントの登録と更新と削除class AccountViewModel extends ChangeNotifier {  final FirebaseAccountService _firebaseService = FirebaseAccountService();  /// Firebaseの現在のユーザーを取得し、新しいアカウント情報をFirebaseに保存するメソッド。  /// [ref] - WidgetRefを使用して、Providerから状態を読み取るために使用。  /// 成功時はアカウント情報を更新し、失敗時はエラーメッセージを設定する。  Future<void> createUserAccount(WidgetRef ref) async {    try {      // 現在のユーザーを取得      final User? user = await _firebaseService.getCurrentUser();      if (user == null) {        ref.read(errorMessageProvider.notifier).state = "ユーザーが見つかりません";        return;      }      // 以下、アカウント保存処理      var accountState = ref.read(accountStateNotifierProvider);      //入力検証のロジック      if (!_validateName(accountState.name, ref)) {        return;      }      // ロード開始      LoadingManager.instance.startLoading(ref);      // アカウントオブジェクトを取得      final Account newAccount = await prepareNewUserAccountData(          user.uid, accountState.name, accountState.imagePath);      // firestore　保存処理      var result = await AccountFirestore().saveNewUserToFirestore(newAccount);      if (result) {        //riverpodにAccountの状態を保存        ref.read(accountNotifierProvider.notifier).updateAccount(newAccount);        //完了を通知        ref            .read(accountStateNotifierProvider.notifier)            .onUserIsAccountCreatedSuccessfully(true);        return;      }    } catch (e) {      AppLogger.instance.error("アカウント作成に失敗 $e");      // エラーステートを設定する      ErrorHandler.instance.setErrorState(ref, getErrorMessage(e));    } finally {      // ロード終了      LoadingManager.instance.stopLoading(ref);    }  }  /// ユーザーアカウント情報をFirebaseに更新するメソッド。  /// [isImageDeleted] - ユーザーの画像が削除されたかどうかを表すブール値。  /// [ref] - WidgetRefを使用して、Providerから状態を読み取るために使用。  /// ユーザー情報の変更があった場合にのみ更新処理を行う。  Future<void> updateUserAccount(bool isImageDeleted, WidgetRef ref) async {    try {      final Account myAccount = ref.read(accountNotifierProvider);      // ユーザーの名前や画像が変更されている場合にFirebaseに情報を更新      var accountState = ref.read(accountStateNotifierProvider);      String name = accountState.name;      String oldName = myAccount.name;      String? imagePath = accountState.imagePath;      String oldImagePath = myAccount.imagePath;      //入力検証のロジック      if (!_validateName(accountState.name, ref)) {        return;      }      // 名前と画像に変更がない場合、早期に関数を終了      if (name == oldName && !isImageDeleted && imagePath == oldImagePath) {        showErrorSnackBar(context: ref.context, text: "変更がありません");        return;      }      // ロード開始      LoadingManager.instance.startLoading(ref);      // アカウントオブジェクトを取得      final Account updateAccount =          await AccountFirestore.prepareUpdatedUserAccountData(              myAccount.id,              accountState.name,              accountState.imagePath,              isImageDeleted,              myAccount.imagePath);      // firestore 更新処理      var result =          await AccountFirestore().saveUpdatedUserToFirestore(updateAccount);      if (result) {        //riverpodにAccountの状態を保存        ref.read(accountNotifierProvider.notifier).updateAccount(updateAccount);        //完了を通知        ref.read(accountStateNotifierProvider.notifier).onUserIsEditing(true);        return;      }    } catch (e) {      AppLogger.instance.error("アカウント更新に失敗　$e");      // エラーステートを設定する      ErrorHandler.instance.setErrorState(ref, getErrorMessage(e));    } finally {      // ロード終了      // LoadingManager.instance.stopLoading(ref);    }  }  /// ユーザーアカウントをFirebaseから削除するメソッド。  /// [ref] - WidgetRefを使用して、Providerから状態を読み取るために使用。  /// 削除が成功した場合はtrue、失敗した場合はfalseを返す。  Future<bool> deleteUserAccount(WidgetRef ref) async {    try {      final Account myAccount = ref.read(accountNotifierProvider);      ;      // ロード開始      // LoadingManager.instance.startLoading(ref);      //削除処理      var result = await AccountFirestore().deleteCurrentUser(myAccount);      return result;    } catch (e) {      AppLogger.instance.error("アカウント削除に失敗　$e");      // エラーステートを設定する      ErrorHandler.instance.setErrorState(ref, getErrorMessage(e));      return false;    } finally {      // ロード終了      LoadingManager.instance.stopLoading(ref);    }  }  // Firebaseに保存されているユーザーアカウントデータを新しい情報で準備するメソッド。  /// [uid] - ユーザーID。  /// [name] - ユーザー名。  /// [imagePath] - ユーザーの画像パス。  /// 新しいアカウントオブジェクトを作成し、これを返す。  Future<Account> prepareNewUserAccountData(      String uid, String name, String? imagePath) async {    // トークン取得    final registrationToken = await _firebaseService.getToken();    // 画像アップロード    String? image = await _firebaseService.uploadUserImage(imagePath ?? "");    // アカウントオブジェクト作成    final Account newAccount = Account(        id: uid,        name: name,        myToken: registrationToken.toString(),        imagePath: image ?? "");    return newAccount;  }  /// 入力された名前が適切かどうかを検証するプライベートメソッド。  /// [name] - 検証する名前。  /// [ref] - WidgetRefを使用して、エラーメッセージの状態を設定するために使用。  /// 名前が空、または短すぎる場合にエラーメッセージを設定し、falseを返す。  bool _validateName(String name, WidgetRef ref) {    if (name.isEmpty) {      ErrorHandler.instance.setErrorState(ref, "名前が入力されていません");      return false;    }    if (name.length < 1) {      ErrorHandler.instance.setErrorState(ref, "名前が短いです");      return false;    }    return true;  }}